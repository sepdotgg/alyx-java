plugins {
    id 'java'
    id 'application'
}

dependencies {
    // alyx core dependencies
    implementation project(':alyx-core')
    // implementation project(':alyx-plugins')
    implementation "org.beryx:text-io:3.3.0" // for interactive setup
    implementation "net.harawata:appdirs:1.1.+" // for platform independent application dirs
    implementation "gg.sep:result:1.1.1"
    implementation "org.pf4j:pf4j:3.3.+"

    // External Utilities and Libraries
    implementation "commons-cli:commons-cli:1.4"
    implementation "com.google.code.gson:gson:2.8.+"
    implementation "org.apache.commons:commons-lang3:3.+"
    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    // build dependencies
    sepBuildConfig "gg.sep:sep-java-build-config:0.4.0"
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotbugsVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.pf4j:pf4j:3.3.+"

    // Use JUnit Jupiter API for testing.
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    // Use Mockito for Testing
    testImplementation "org.mockito:mockito-core:3.3.+"

}

task extractFile(type: Copy, dependsOn: configurations.sepBuildConfig) {
    from {
        zipTree(configurations.sepBuildConfig.singleFile)
    }
    into "${buildDir}/"
    include "configuration/"
}

checkstyle {
    ignoreFailures false
    configFile file("${buildDir}/configuration/checkstyle/checkstyle.xml")
    configDirectory = file("${buildDir}/configuration/checkstyle")
    toolVersion checkstyleVersion
}
checkstyleMain.dependsOn extractFile
checkstyleTest.dependsOn extractFile

spotbugs {
    toolVersion = '4.0.6'
}

def spotbugsReports = {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
spotbugsTest {
    spotbugsReports
}

jacocoTestReport {
    reports {
        html.enabled = true
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0 // TODO
            }
        }
    }
}

task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = false
}

check.dependsOn jacocoTestCoverageVerification
build.dependsOn jacocoTestReport
build.dependsOn javadoc


// unchecked and deprecation should produce warnings
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

application {
    // Define the main class for the application
    mainClassName = 'gg.sep.alyx.Launcher'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}
